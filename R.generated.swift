//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 12 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background")
    /// Color `blueLight`.
    static let blueLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "blueLight")
    /// Color `blue`.
    static let blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "blue")
    /// Color `body`.
    static let body = Rswift.ColorResource(bundle: R.hostingBundle, name: "body")
    /// Color `border`.
    static let border = Rswift.ColorResource(bundle: R.hostingBundle, name: "border")
    /// Color `greenDark`.
    static let greenDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "greenDark")
    /// Color `greenLight`.
    static let greenLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "greenLight")
    /// Color `green`.
    static let green = Rswift.ColorResource(bundle: R.hostingBundle, name: "green")
    /// Color `heading`.
    static let heading = Rswift.ColorResource(bundle: R.hostingBundle, name: "heading")
    /// Color `red`.
    static let red = Rswift.ColorResource(bundle: R.hostingBundle, name: "red")
    /// Color `shape`.
    static let shape = Rswift.ColorResource(bundle: R.hostingBundle, name: "shape")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blueLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "body", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func body(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.body, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "border", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func border(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.border, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "greenDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greenDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greenDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "greenLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greenLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greenLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "heading", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func heading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.heading, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shape", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shape, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blueLight", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blueLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blueLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "body", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func body(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.body.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "border", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func border(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.border.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "greenDark", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func greenDark(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.greenDark.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "greenLight", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func greenLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.greenLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "heading", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func heading(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.heading.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "shape", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shape(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shape.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 18 files.
  struct file {
    /// Resource file `Jost-Black.ttf`.
    static let jostBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-Black", pathExtension: "ttf")
    /// Resource file `Jost-BlackItalic.ttf`.
    static let jostBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-BlackItalic", pathExtension: "ttf")
    /// Resource file `Jost-Bold.ttf`.
    static let jostBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-Bold", pathExtension: "ttf")
    /// Resource file `Jost-BoldItalic.ttf`.
    static let jostBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-BoldItalic", pathExtension: "ttf")
    /// Resource file `Jost-ExtraBold.ttf`.
    static let jostExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-ExtraBold", pathExtension: "ttf")
    /// Resource file `Jost-ExtraBoldItalic.ttf`.
    static let jostExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Jost-ExtraLight.ttf`.
    static let jostExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-ExtraLight", pathExtension: "ttf")
    /// Resource file `Jost-ExtraLightItalic.ttf`.
    static let jostExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Jost-Italic.ttf`.
    static let jostItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-Italic", pathExtension: "ttf")
    /// Resource file `Jost-Light.ttf`.
    static let jostLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-Light", pathExtension: "ttf")
    /// Resource file `Jost-LightItalic.ttf`.
    static let jostLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-LightItalic", pathExtension: "ttf")
    /// Resource file `Jost-Medium.ttf`.
    static let jostMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-Medium", pathExtension: "ttf")
    /// Resource file `Jost-MediumItalic.ttf`.
    static let jostMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-MediumItalic", pathExtension: "ttf")
    /// Resource file `Jost-Regular.ttf`.
    static let jostRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-Regular", pathExtension: "ttf")
    /// Resource file `Jost-SemiBold.ttf`.
    static let jostSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-SemiBold", pathExtension: "ttf")
    /// Resource file `Jost-SemiBoldItalic.ttf`.
    static let jostSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Jost-Thin.ttf`.
    static let jostThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-Thin", pathExtension: "ttf")
    /// Resource file `Jost-ThinItalic.ttf`.
    static let jostThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Jost-ThinItalic", pathExtension: "ttf")

    /// `bundle.url(forResource: "Jost-Black", withExtension: "ttf")`
    static func jostBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-BlackItalic", withExtension: "ttf")`
    static func jostBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-Bold", withExtension: "ttf")`
    static func jostBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-BoldItalic", withExtension: "ttf")`
    static func jostBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-ExtraBold", withExtension: "ttf")`
    static func jostExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-ExtraBoldItalic", withExtension: "ttf")`
    static func jostExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-ExtraLight", withExtension: "ttf")`
    static func jostExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-ExtraLightItalic", withExtension: "ttf")`
    static func jostExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-Italic", withExtension: "ttf")`
    static func jostItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-Light", withExtension: "ttf")`
    static func jostLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-LightItalic", withExtension: "ttf")`
    static func jostLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-Medium", withExtension: "ttf")`
    static func jostMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-MediumItalic", withExtension: "ttf")`
    static func jostMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-Regular", withExtension: "ttf")`
    static func jostRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-SemiBold", withExtension: "ttf")`
    static func jostSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-SemiBoldItalic", withExtension: "ttf")`
    static func jostSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-Thin", withExtension: "ttf")`
    static func jostThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Jost-ThinItalic", withExtension: "ttf")`
    static func jostThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.jostThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `Jost-BlackItalic`.
    static let jostBlackItalic = Rswift.FontResource(fontName: "Jost-BlackItalic")
    /// Font `Jost-Black`.
    static let jostBlack = Rswift.FontResource(fontName: "Jost-Black")
    /// Font `Jost-BoldItalic`.
    static let jostBoldItalic = Rswift.FontResource(fontName: "Jost-BoldItalic")
    /// Font `Jost-Bold`.
    static let jostBold = Rswift.FontResource(fontName: "Jost-Bold")
    /// Font `Jost-ExtraBoldItalic`.
    static let jostExtraBoldItalic = Rswift.FontResource(fontName: "Jost-ExtraBoldItalic")
    /// Font `Jost-ExtraBold`.
    static let jostExtraBold = Rswift.FontResource(fontName: "Jost-ExtraBold")
    /// Font `Jost-ExtraLightItalic`.
    static let jostExtraLightItalic = Rswift.FontResource(fontName: "Jost-ExtraLightItalic")
    /// Font `Jost-ExtraLight`.
    static let jostExtraLight = Rswift.FontResource(fontName: "Jost-ExtraLight")
    /// Font `Jost-Italic`.
    static let jostItalic = Rswift.FontResource(fontName: "Jost-Italic")
    /// Font `Jost-LightItalic`.
    static let jostLightItalic = Rswift.FontResource(fontName: "Jost-LightItalic")
    /// Font `Jost-Light`.
    static let jostLight = Rswift.FontResource(fontName: "Jost-Light")
    /// Font `Jost-MediumItalic`.
    static let jostMediumItalic = Rswift.FontResource(fontName: "Jost-MediumItalic")
    /// Font `Jost-Medium`.
    static let jostMedium = Rswift.FontResource(fontName: "Jost-Medium")
    /// Font `Jost-Regular`.
    static let jostRegular = Rswift.FontResource(fontName: "Jost-Regular")
    /// Font `Jost-SemiBoldItalic`.
    static let jostSemiBoldItalic = Rswift.FontResource(fontName: "Jost-SemiBoldItalic")
    /// Font `Jost-SemiBold`.
    static let jostSemiBold = Rswift.FontResource(fontName: "Jost-SemiBold")
    /// Font `Jost-ThinItalic`.
    static let jostThinItalic = Rswift.FontResource(fontName: "Jost-ThinItalic")
    /// Font `Jost-Thin`.
    static let jostThin = Rswift.FontResource(fontName: "Jost-Thin")

    /// `UIFont(name: "Jost-Black", size: ...)`
    static func jostBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostBlack, size: size)
    }

    /// `UIFont(name: "Jost-BlackItalic", size: ...)`
    static func jostBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostBlackItalic, size: size)
    }

    /// `UIFont(name: "Jost-Bold", size: ...)`
    static func jostBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostBold, size: size)
    }

    /// `UIFont(name: "Jost-BoldItalic", size: ...)`
    static func jostBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostBoldItalic, size: size)
    }

    /// `UIFont(name: "Jost-ExtraBold", size: ...)`
    static func jostExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostExtraBold, size: size)
    }

    /// `UIFont(name: "Jost-ExtraBoldItalic", size: ...)`
    static func jostExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Jost-ExtraLight", size: ...)`
    static func jostExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostExtraLight, size: size)
    }

    /// `UIFont(name: "Jost-ExtraLightItalic", size: ...)`
    static func jostExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Jost-Italic", size: ...)`
    static func jostItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostItalic, size: size)
    }

    /// `UIFont(name: "Jost-Light", size: ...)`
    static func jostLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostLight, size: size)
    }

    /// `UIFont(name: "Jost-LightItalic", size: ...)`
    static func jostLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostLightItalic, size: size)
    }

    /// `UIFont(name: "Jost-Medium", size: ...)`
    static func jostMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostMedium, size: size)
    }

    /// `UIFont(name: "Jost-MediumItalic", size: ...)`
    static func jostMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostMediumItalic, size: size)
    }

    /// `UIFont(name: "Jost-Regular", size: ...)`
    static func jostRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostRegular, size: size)
    }

    /// `UIFont(name: "Jost-SemiBold", size: ...)`
    static func jostSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostSemiBold, size: size)
    }

    /// `UIFont(name: "Jost-SemiBoldItalic", size: ...)`
    static func jostSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Jost-Thin", size: ...)`
    static func jostThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostThin, size: size)
    }

    /// `UIFont(name: "Jost-ThinItalic", size: ...)`
    static func jostThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: jostThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.jostBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-Black' could not be loaded, is 'Jost-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-BlackItalic' could not be loaded, is 'Jost-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-Bold' could not be loaded, is 'Jost-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-BoldItalic' could not be loaded, is 'Jost-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-ExtraBold' could not be loaded, is 'Jost-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-ExtraBoldItalic' could not be loaded, is 'Jost-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-ExtraLight' could not be loaded, is 'Jost-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-ExtraLightItalic' could not be loaded, is 'Jost-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-Italic' could not be loaded, is 'Jost-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-Light' could not be loaded, is 'Jost-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-LightItalic' could not be loaded, is 'Jost-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-Medium' could not be loaded, is 'Jost-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-MediumItalic' could not be loaded, is 'Jost-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-Regular' could not be loaded, is 'Jost-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-SemiBold' could not be loaded, is 'Jost-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-SemiBoldItalic' could not be loaded, is 'Jost-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-Thin' could not be loaded, is 'Jost-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.jostThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Jost-ThinItalic' could not be loaded, is 'Jost-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `greeting`.
    static let greeting = Rswift.ImageResource(bundle: R.hostingBundle, name: "greeting")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greeting", bundle: ..., traitCollection: ...)`
    static func greeting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greeting, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.lozalizable` struct is generated, and contains static references to 21 localization keys.
    struct lozalizable {
      /// en translation: Agora vamos começar a cuidar das suas plantinhas com muito cuidado.
      ///
      /// Locales: en, pt-BR
      static let userIdentificationViewConfirmationMessage = Rswift.StringResource(key: "UserIdentificationView.confirmationMessage", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Cadastrar Planta
      ///
      /// Locales: en, pt-BR
      static let addPlantViewRegisterPlant = Rswift.StringResource(key: "AddPlantView.registerPlant", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Começar
      ///
      /// Locales: en, pt-BR
      static let userIdentificationViewConfirmationButton = Rswift.StringResource(key: "UserIdentificationView.confirmationButton", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Como podemos chamar você?
      ///
      /// Locales: en, pt-BR
      static let userIdentificationViewTitle = Rswift.StringResource(key: "UserIdentificationView.title", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Confirmar
      ///
      /// Locales: en, pt-BR
      static let uiButtonTitleConfirm = Rswift.StringResource(key: "UIButton.titleConfirm", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Deseja mesmo deletar sua 
      ///
      /// Locales: en, pt-BR
      static let myPlantsViewDeleteMessage = Rswift.StringResource(key: "MyPlantsView.deleteMessage", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Digite o seu nome
      ///
      /// Locales: en, pt-BR
      static let uiTextFieldPlaceholderName = Rswift.StringResource(key: "UITextField.placeholderName", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Em qual ambiente
      ///
      /// Locales: en, pt-BR
      static let plantsViewSectionHeaderTitle = Rswift.StringResource(key: "PlantsView.sectionHeaderTitle", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Entendi
      ///
      /// Locales: en, pt-BR
      static let addPlantViewConfirmationButton = Rswift.StringResource(key: "AddPlantView.confirmationButton", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Escolha o melhor horário para ser lembrado:
      ///
      /// Locales: en, pt-BR
      static let addPlantViewTimerTitle = Rswift.StringResource(key: "AddPlantView.timerTitle", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Fique tranquilo que sempre vamos lembrar você de cuidar da sua platinha com bastante amor.
      ///
      /// Locales: en, pt-BR
      static let addPlantViewConfirmationMessage = Rswift.StringResource(key: "AddPlantView.confirmationMessage", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Gerencie suas plantas de forma fácil
      ///
      /// Locales: en, pt-BR
      static let greetingViewTitle = Rswift.StringResource(key: "GreetingView.title", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Minhas
      ///
      /// Locales: en, pt-BR
      static let myPlantsViewTitlePrefix = Rswift.StringResource(key: "MyPlantsView.titlePrefix", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Não esqueça mais de regar suas plantas. Nós cuidamos de lembrar você sempre que precisar.
      ///
      /// Locales: en, pt-BR
      static let greetingViewDescription = Rswift.StringResource(key: "GreetingView.description", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Olá
      ///
      /// Locales: en, pt-BR
      static let plantsViewTitle = Rswift.StringResource(key: "PlantsView.title", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Plantinhas
      ///
      /// Locales: en, pt-BR
      static let myPlantsViewTitle = Rswift.StringResource(key: "MyPlantsView.title", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Prontinho
      ///
      /// Locales: en, pt-BR
      static let userIdentificationViewConfirmationTitle = Rswift.StringResource(key: "UserIdentificationView.confirmationTitle", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Próximas regadas
      ///
      /// Locales: en, pt-BR
      static let myPlantsViewSubtitle = Rswift.StringResource(key: "MyPlantsView.subtitle", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Remover
      ///
      /// Locales: en, pt-BR
      static let myPlantsViewDelete = Rswift.StringResource(key: "MyPlantsView.delete", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Tudo certo
      ///
      /// Locales: en, pt-BR
      static let addPlantViewConfirmationTitle = Rswift.StringResource(key: "AddPlantView.confirmationTitle", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: você quer colocar a sua planta
      ///
      /// Locales: en, pt-BR
      static let plantsViewSectionHeaderSubtitle = Rswift.StringResource(key: "PlantsView.sectionHeaderSubtitle", tableName: "Lozalizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)

      /// en translation: Agora vamos começar a cuidar das suas plantinhas com muito cuidado.
      ///
      /// Locales: en, pt-BR
      static func userIdentificationViewConfirmationMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserIdentificationView.confirmationMessage", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "UserIdentificationView.confirmationMessage"
        }

        return NSLocalizedString("UserIdentificationView.confirmationMessage", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Cadastrar Planta
      ///
      /// Locales: en, pt-BR
      static func addPlantViewRegisterPlant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddPlantView.registerPlant", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "AddPlantView.registerPlant"
        }

        return NSLocalizedString("AddPlantView.registerPlant", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Começar
      ///
      /// Locales: en, pt-BR
      static func userIdentificationViewConfirmationButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserIdentificationView.confirmationButton", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "UserIdentificationView.confirmationButton"
        }

        return NSLocalizedString("UserIdentificationView.confirmationButton", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Como podemos chamar você?
      ///
      /// Locales: en, pt-BR
      static func userIdentificationViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserIdentificationView.title", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "UserIdentificationView.title"
        }

        return NSLocalizedString("UserIdentificationView.title", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Confirmar
      ///
      /// Locales: en, pt-BR
      static func uiButtonTitleConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UIButton.titleConfirm", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "UIButton.titleConfirm"
        }

        return NSLocalizedString("UIButton.titleConfirm", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Deseja mesmo deletar sua 
      ///
      /// Locales: en, pt-BR
      static func myPlantsViewDeleteMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MyPlantsView.deleteMessage", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "MyPlantsView.deleteMessage"
        }

        return NSLocalizedString("MyPlantsView.deleteMessage", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Digite o seu nome
      ///
      /// Locales: en, pt-BR
      static func uiTextFieldPlaceholderName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UITextField.placeholderName", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "UITextField.placeholderName"
        }

        return NSLocalizedString("UITextField.placeholderName", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Em qual ambiente
      ///
      /// Locales: en, pt-BR
      static func plantsViewSectionHeaderTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PlantsView.sectionHeaderTitle", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "PlantsView.sectionHeaderTitle"
        }

        return NSLocalizedString("PlantsView.sectionHeaderTitle", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Entendi
      ///
      /// Locales: en, pt-BR
      static func addPlantViewConfirmationButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddPlantView.confirmationButton", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "AddPlantView.confirmationButton"
        }

        return NSLocalizedString("AddPlantView.confirmationButton", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Escolha o melhor horário para ser lembrado:
      ///
      /// Locales: en, pt-BR
      static func addPlantViewTimerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddPlantView.timerTitle", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "AddPlantView.timerTitle"
        }

        return NSLocalizedString("AddPlantView.timerTitle", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Fique tranquilo que sempre vamos lembrar você de cuidar da sua platinha com bastante amor.
      ///
      /// Locales: en, pt-BR
      static func addPlantViewConfirmationMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddPlantView.confirmationMessage", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "AddPlantView.confirmationMessage"
        }

        return NSLocalizedString("AddPlantView.confirmationMessage", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Gerencie suas plantas de forma fácil
      ///
      /// Locales: en, pt-BR
      static func greetingViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GreetingView.title", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "GreetingView.title"
        }

        return NSLocalizedString("GreetingView.title", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Minhas
      ///
      /// Locales: en, pt-BR
      static func myPlantsViewTitlePrefix(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MyPlantsView.titlePrefix", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "MyPlantsView.titlePrefix"
        }

        return NSLocalizedString("MyPlantsView.titlePrefix", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Não esqueça mais de regar suas plantas. Nós cuidamos de lembrar você sempre que precisar.
      ///
      /// Locales: en, pt-BR
      static func greetingViewDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GreetingView.description", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "GreetingView.description"
        }

        return NSLocalizedString("GreetingView.description", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Olá
      ///
      /// Locales: en, pt-BR
      static func plantsViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PlantsView.title", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "PlantsView.title"
        }

        return NSLocalizedString("PlantsView.title", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Plantinhas
      ///
      /// Locales: en, pt-BR
      static func myPlantsViewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MyPlantsView.title", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "MyPlantsView.title"
        }

        return NSLocalizedString("MyPlantsView.title", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Prontinho
      ///
      /// Locales: en, pt-BR
      static func userIdentificationViewConfirmationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UserIdentificationView.confirmationTitle", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "UserIdentificationView.confirmationTitle"
        }

        return NSLocalizedString("UserIdentificationView.confirmationTitle", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Próximas regadas
      ///
      /// Locales: en, pt-BR
      static func myPlantsViewSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MyPlantsView.subtitle", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "MyPlantsView.subtitle"
        }

        return NSLocalizedString("MyPlantsView.subtitle", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Remover
      ///
      /// Locales: en, pt-BR
      static func myPlantsViewDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MyPlantsView.delete", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "MyPlantsView.delete"
        }

        return NSLocalizedString("MyPlantsView.delete", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: Tudo certo
      ///
      /// Locales: en, pt-BR
      static func addPlantViewConfirmationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AddPlantView.confirmationTitle", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "AddPlantView.confirmationTitle"
        }

        return NSLocalizedString("AddPlantView.confirmationTitle", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      /// en translation: você quer colocar a sua planta
      ///
      /// Locales: en, pt-BR
      static func plantsViewSectionHeaderSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PlantsView.sectionHeaderSubtitle", tableName: "Lozalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Lozalizable", preferredLanguages: preferredLanguages) else {
          return "PlantsView.sectionHeaderSubtitle"
        }

        return NSLocalizedString("PlantsView.sectionHeaderSubtitle", tableName: "Lozalizable", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
